
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package com.aguare.appgraphic.Back;

import com.aguare.appgraphic.Back.Control.ErrorDesc;
import com.aguare.appgraphic.Back.Control.CreateGraphics;
import com.aguare.appgraphic.Back.Control.Transition;
import java.util.ArrayList;

import com.aguare.appgraphic.Back.sym;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticParser extends lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticParser(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticParser(Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\027\003\000\002\027\004" +
    "\000\002\024\003\000\002\024\003\000\002\023\007\000" +
    "\002\003\007\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\002\000\002\004" +
    "\004\000\002\005\007\000\002\020\004\000\002\020\004" +
    "\000\002\020\004\000\002\020\004\000\002\020\004\000" +
    "\002\020\004\000\002\020\004\000\002\020\002\000\002" +
    "\020\004\000\002\006\006\000\002\007\010\000\002\025" +
    "\005\000\002\025\003\000\002\010\010\000\002\026\005" +
    "\000\002\026\003\000\002\011\016\000\002\031\005\000" +
    "\002\031\005\000\002\013\006\000\002\014\010\000\002" +
    "\030\003\000\002\030\005\000\002\015\010\000\002\032" +
    "\003\000\002\032\005\000\002\016\006\000\002\017\006" +
    "\000\002\021\003\000\002\021\005\000\002\021\005\000" +
    "\002\022\003\000\002\022\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\004\006\010\001\002\000\010\002\ufffa\006" +
    "\ufffa\023\ufffa\001\002\000\010\002\ufffe\006\010\023\177" +
    "\001\002\000\004\002\173\001\002\000\010\002\ufffb\006" +
    "\ufffb\023\ufffb\001\002\000\006\007\012\010\011\001\002" +
    "\000\004\030\112\001\002\000\004\030\013\001\002\000" +
    "\016\003\024\011\025\012\022\013\021\016\016\031\ufff3" +
    "\001\002\000\004\031\111\001\002\000\016\003\024\011" +
    "\025\012\022\013\021\016\016\031\ufff3\001\002\000\004" +
    "\037\071\001\002\000\016\003\024\011\025\012\022\013" +
    "\021\016\016\031\ufff3\001\002\000\016\003\024\011\025" +
    "\012\022\013\021\016\016\031\ufff3\001\002\000\004\037" +
    "\043\001\002\000\004\037\033\001\002\000\016\003\024" +
    "\011\025\012\022\013\021\016\016\031\ufff3\001\002\000" +
    "\004\036\031\001\002\000\004\037\026\001\002\000\004" +
    "\040\027\001\002\000\004\036\030\001\002\000\030\003" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\021\uffe7\022\uffe7\031\uffe7\001\002\000\004\031" +
    "\ufff2\001\002\000\004\031\ufff4\001\002\000\004\032\034" +
    "\001\002\000\004\040\035\001\002\000\006\033\uffe4\041" +
    "\041\001\002\000\004\033\037\001\002\000\004\036\040" +
    "\001\002\000\016\003\uffe6\011\uffe6\012\uffe6\013\uffe6\016" +
    "\uffe6\031\uffe6\001\002\000\004\040\035\001\002\000\004" +
    "\033\uffe5\001\002\000\004\032\044\001\002\000\010\004" +
    "\046\005\052\034\047\001\002\000\004\033\065\001\002" +
    "\000\022\024\uffd1\025\uffd1\026\uffd1\027\uffd1\033\uffd1\035" +
    "\uffd1\036\uffd1\041\uffd1\001\002\000\010\004\046\005\052" +
    "\034\047\001\002\000\016\024\055\025\054\026\060\027" +
    "\056\033\uffe1\041\053\001\002\000\022\024\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\033\uffd4\035\uffd4\036\uffd4\041\uffd4\001" +
    "\002\000\022\024\uffd0\025\uffd0\026\uffd0\027\uffd0\033\uffd0" +
    "\035\uffd0\036\uffd0\041\uffd0\001\002\000\010\004\046\005" +
    "\052\034\047\001\002\000\010\004\uffce\005\uffce\034\uffce" +
    "\001\002\000\010\004\uffcf\005\uffcf\034\uffcf\001\002\000" +
    "\010\004\uffcc\005\uffcc\034\uffcc\001\002\000\010\004\046" +
    "\005\052\034\047\001\002\000\010\004\uffcd\005\uffcd\034" +
    "\uffcd\001\002\000\022\024\055\025\054\026\060\027\056" +
    "\033\uffd2\035\uffd2\036\uffd2\041\uffd2\001\002\000\004\033" +
    "\uffe2\001\002\000\014\024\055\025\054\026\060\027\056" +
    "\035\064\001\002\000\022\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\033\uffd3\035\uffd3\036\uffd3\041\uffd3\001\002\000\004" +
    "\036\066\001\002\000\016\003\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\016\uffe3\031\uffe3\001\002\000\004\031\ufff6\001\002" +
    "\000\004\031\ufff7\001\002\000\004\032\072\001\002\000" +
    "\004\030\073\001\002\000\004\004\074\001\002\000\004" +
    "\041\105\001\002\000\004\031\076\001\002\000\004\041" +
    "\077\001\002\000\004\030\100\001\002\000\004\004\074" +
    "\001\002\000\004\031\102\001\002\000\004\033\103\001" +
    "\002\000\004\036\104\001\002\000\030\003\uffe0\011\uffe0" +
    "\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\021" +
    "\uffe0\022\uffe0\031\uffe0\001\002\000\004\004\106\001\002" +
    "\000\006\031\uffdf\041\105\001\002\000\004\031\uffde\001" +
    "\002\000\004\031\ufff5\001\002\000\010\002\ufff8\006\ufff8" +
    "\023\ufff8\001\002\000\024\003\125\011\025\014\127\015" +
    "\126\016\016\017\124\021\116\022\130\031\uffe9\001\002" +
    "\000\024\003\125\011\025\014\127\015\126\016\016\017" +
    "\124\021\116\022\130\031\uffe9\001\002\000\004\031\171" +
    "\001\002\000\024\003\125\011\025\014\127\015\126\016" +
    "\016\017\124\021\116\022\130\031\uffe9\001\002\000\004" +
    "\037\165\001\002\000\024\003\125\011\025\014\127\015" +
    "\126\016\016\017\124\021\116\022\130\031\uffe9\001\002" +
    "\000\024\003\125\011\025\014\127\015\126\016\016\017" +
    "\124\021\116\022\130\031\uffe9\001\002\000\024\003\125" +
    "\011\025\014\127\015\126\016\016\017\124\021\116\022" +
    "\130\031\uffe9\001\002\000\024\003\125\011\025\014\127" +
    "\015\126\016\016\017\124\021\116\022\130\031\uffe9\001" +
    "\002\000\024\003\125\011\025\014\127\015\126\016\016" +
    "\017\124\021\116\022\130\031\uffe9\001\002\000\004\037" +
    "\155\001\002\000\004\036\154\001\002\000\004\037\144" +
    "\001\002\000\004\037\134\001\002\000\004\037\131\001" +
    "\002\000\004\040\132\001\002\000\004\036\133\001\002" +
    "\000\024\003\uffd5\011\uffd5\014\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\021\uffd5\022\uffd5\031\uffd5\001\002\000\004\032\135" +
    "\001\002\000\004\040\136\001\002\000\006\033\uffdb\041" +
    "\142\001\002\000\004\033\140\001\002\000\004\036\141" +
    "\001\002\000\024\003\uffdc\011\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\021\uffdc\022\uffdc\031\uffdc\001\002\000\004" +
    "\040\136\001\002\000\004\033\uffda\001\002\000\004\032" +
    "\145\001\002\000\010\004\046\005\052\034\047\001\002" +
    "\000\004\033\152\001\002\000\016\024\055\025\054\026" +
    "\060\027\056\033\uffd8\041\150\001\002\000\010\004\046" +
    "\005\052\034\047\001\002\000\004\033\uffd7\001\002\000" +
    "\004\036\153\001\002\000\024\003\uffd9\011\uffd9\014\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\021\uffd9\022\uffd9\031\uffd9\001" +
    "\002\000\004\031\uffe8\001\002\000\004\020\156\001\002" +
    "\000\004\036\157\001\002\000\024\003\uffdd\011\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\021\uffdd\022\uffdd\031\uffdd" +
    "\001\002\000\004\031\uffef\001\002\000\004\031\uffec\001" +
    "\002\000\004\031\uffea\001\002\000\004\031\uffee\001\002" +
    "\000\004\031\uffeb\001\002\000\010\004\046\005\052\034" +
    "\047\001\002\000\014\024\055\025\054\026\060\027\056" +
    "\036\167\001\002\000\024\003\uffd6\011\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\021\uffd6\022\uffd6\031\uffd6\001\002" +
    "\000\004\031\uffed\001\002\000\010\002\ufff1\006\ufff1\023" +
    "\ufff1\001\002\000\004\031\ufff0\001\002\000\004\002\001" +
    "\001\002\000\006\002\ufffd\023\177\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\000\001\002\000\004\034\200" +
    "\001\002\000\004\040\201\001\002\000\004\035\202\001" +
    "\002\000\004\036\203\001\002\000\006\002\ufff9\023\ufff9" +
    "\001\002\000\004\002\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\012\002\005\003\003\005\006\024\004\001" +
    "\001\000\002\001\001\000\016\002\175\003\003\005\006" +
    "\023\173\024\004\027\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\013\006\016\007\017\010\014\011" +
    "\022\001\001\000\002\001\001\000\014\004\107\006\016" +
    "\007\017\010\014\011\022\001\001\000\002\001\001\000" +
    "\014\004\067\006\016\007\017\010\014\011\022\001\001" +
    "\000\014\004\066\006\016\007\017\010\014\011\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\031" +
    "\006\016\007\017\010\014\011\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\021\047\022\050\026\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\062\022\050\001\001" +
    "\000\004\012\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\021\047\022\050\026\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\060\022\050\001\001\000\002\001\001\000\004\012\056" +
    "\001\001\000\002\001\001\000\004\012\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\112\011\116\013\122\014\117\015" +
    "\114\016\121\017\120\020\113\001\001\000\022\006\112" +
    "\011\116\013\122\014\117\015\114\016\121\017\120\020" +
    "\171\001\001\000\002\001\001\000\022\006\112\011\116" +
    "\013\122\014\117\015\114\016\121\017\120\020\167\001" +
    "\001\000\002\001\001\000\022\006\112\011\116\013\122" +
    "\014\117\015\114\016\121\017\120\020\163\001\001\000" +
    "\022\006\112\011\116\013\122\014\117\015\114\016\121" +
    "\017\120\020\162\001\001\000\022\006\112\011\116\013" +
    "\122\014\117\015\114\016\121\017\120\020\161\001\001" +
    "\000\022\006\112\011\116\013\122\014\117\015\114\016" +
    "\121\017\120\020\160\001\001\000\022\006\112\011\116" +
    "\013\122\014\117\015\114\016\121\017\120\020\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\021\146\022" +
    "\050\032\145\001\001\000\002\001\001\000\004\012\056" +
    "\001\001\000\010\021\146\022\050\032\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\165\022" +
    "\050\001\001\000\004\012\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\173\027\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        public ArrayList<ErrorDesc> errors = new ArrayList<>();
        Transition trans = new Transition();
        public CreateGraphics create = new CreateGraphics();

        public SintacticParser(AnalizerPractice lexer){
                super(lexer);
        }

        public void viewToken(Symbol cur_token){
                System.out.println("Simbolo detectado " + sym.terminalNames[cur_token.sym]);
                System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
        }

        public void syntax_error(Symbol cur_token) {
                if (cur_token.sym != sym.EOF){
                        addError(cur_token);
                }else{
                        System.out.println("Fin Lectura");
                        create.showGraphicsSaved();
                }
        }
    
        public void unrecovered_syntax_error(Symbol cur_token) {
                addError(cur_token);
        }
    
        public void addError(Symbol cur_token) {
                try {
                        errors.add(new ErrorDesc((String) cur_token.value, cur_token.left, cur_token.right, trans.analizeError(stack), "Sintáctico"));
                } catch (Exception e) {
                }
        }
    
        public void showErrors() {
                for (ErrorDesc error : errors) {
                        System.out.println("Lexema:" + error.getContent() + " L:" + error.getLine()
                        + " C:" + error.getColumn() + " Tipo:" + error.getTypeError() + " " + error.getMsjInfo());
                }
        }

        public void showSavedGrap(){
            create.showGraphicsSaved();
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticParser$actions {
  private final SintacticParser parser;

  /** Constructor */
  CUP$SintacticParser$actions(SintacticParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final Symbol CUP$SintacticParser$do_action_part00000000(
    int                        CUP$SintacticParser$act_num,
    lr_parser CUP$SintacticParser$parser,
    java.util.Stack            CUP$SintacticParser$stack,
    int                        CUP$SintacticParser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$SintacticParser$result;

      /* select the action based on the action number */
      switch (CUP$SintacticParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int start_valright = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		RESULT = start_val;
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticParser$parser.done_parsing();
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= graphics_declaration initial 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("initial",0, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // initial ::= graphics_declaration execute_estructure 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("initial",0, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // initial ::= graphics_declaration 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("initial",0, ((Symbol)CUP$SintacticParser$stack.peek()), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // execute_estructure ::= execute_graphics 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("execute_estructure",21, ((Symbol)CUP$SintacticParser$stack.peek()), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // execute_estructure ::= execute_graphics execute_estructure 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("execute_estructure",21, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // graphics_declaration ::= pie_estructure 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("graphics_declaration",18, ((Symbol)CUP$SintacticParser$stack.peek()), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // graphics_declaration ::= bar_estructure 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("graphics_declaration",18, ((Symbol)CUP$SintacticParser$stack.peek()), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // execute_graphics ::= RUN O_PARENT STRING C_PARENT SEMICOLON 
            {
              Object RESULT =null;
		int s1left = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).left;
		int s1right = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).right;
		Object s1 = (Object)((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).value;
		
                                                                                        if (!create.saveRunGraphic(s1.toString())){
                                                                                                errors.add(new ErrorDesc("No existe",s1left,s1right,"La gráfica no está declarada", "Semántico"));
                                                                                        }
                                                                                
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("execute_graphics",17, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-4)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bar_estructure ::= START_GRAPHIC TYPE_BARS O_BRACE bar_attributes C_BRACE 
            {
              Object RESULT =null;
		create.type_graphic = 0; Object ob = create.verifyCountDeclaration(cur_token.left, cur_token.right);
                                                                                if (ob instanceof ErrorDesc) {
                                                                                        errors.add((ErrorDesc) ob);
                                                                                }
                                                                              
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("bar_estructure",1, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-4)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bar_attributes ::= title_estructure bar_attributes 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("bar_attributes",2, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bar_attributes ::= axisx_estructure bar_attributes 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("bar_attributes",2, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bar_attributes ::= axisy_estructure bar_attributes 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("bar_attributes",2, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bar_attributes ::= join_estructure bar_attributes 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("bar_attributes",2, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bar_attributes ::= 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("bar_attributes",2, ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bar_attributes ::= error SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("bar_attributes",2, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // pie_estructure ::= START_GRAPHIC TYPE_PIE O_BRACE pie_attributes C_BRACE 
            {
              Object RESULT =null;
		create.type_graphic = 1; Object ob = create.verifyCountDeclaration(cur_token.left, cur_token.right);
                                                                                if (ob instanceof ErrorDesc) {
                                                                                        errors.add((ErrorDesc) ob);
                                                                                }                                                           
                                                                              
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_estructure",3, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-4)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // pie_attributes ::= title_estructure pie_attributes 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes",14, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // pie_attributes ::= type_estructure pie_attributes 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes",14, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // pie_attributes ::= tags_estructure pie_attributes 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes",14, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // pie_attributes ::= values_estructure pie_attributes 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes",14, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // pie_attributes ::= total_estructure pie_attributes 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes",14, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // pie_attributes ::= join_estructure pie_attributes 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes",14, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // pie_attributes ::= extra_estructure pie_attributes 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes",14, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // pie_attributes ::= 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes",14, ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // pie_attributes ::= error SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes",14, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // title_estructure ::= ID_GRAPHIC COLONS STRING SEMICOLON 
            {
              Object RESULT =null;
		int nleft = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int nright = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Object n = (Object)((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		create.title_dec.add(n.toString());
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("title_estructure",4, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // axisx_estructure ::= AXIS_X COLONS O_SBRACKET axisx_entry C_SBRACKET SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("axisx_estructure",5, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-5)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // axisx_entry ::= STRING COMMA axisx_entry 
            {
              Object RESULT =null;
		int s1left = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).left;
		int s1right = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).right;
		Object s1 = (Object)((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).value;
		create.axisx_dec.add(s1.toString());
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("axisx_entry",19, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // axisx_entry ::= STRING 
            {
              Object RESULT =null;
		int s2left = ((Symbol)CUP$SintacticParser$stack.peek()).left;
		int s2right = ((Symbol)CUP$SintacticParser$stack.peek()).right;
		Object s2 = (Object)((Symbol) CUP$SintacticParser$stack.peek()).value;
		create.axisx_dec.add(s2.toString());
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("axisx_entry",19, ((Symbol)CUP$SintacticParser$stack.peek()), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // axisy_estructure ::= AXIS_Y COLONS O_SBRACKET axisy_entry C_SBRACKET SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("axisy_estructure",6, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-5)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // axisy_entry ::= input_operations COMMA axisy_entry 
            {
              Object RESULT =null;
		int op1left = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).left;
		int op1right = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).right;
		Object op1 = (Object)((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).value;
		create.axisy_dec.add(Double.valueOf(op1.toString()));
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("axisy_entry",20, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // axisy_entry ::= input_operations 
            {
              Object RESULT =null;
		int op2left = ((Symbol)CUP$SintacticParser$stack.peek()).left;
		int op2right = ((Symbol)CUP$SintacticParser$stack.peek()).right;
		Object op2 = (Object)((Symbol) CUP$SintacticParser$stack.peek()).value;
		create.axisy_dec.add(Double.valueOf(op2.toString()));
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("axisy_entry",20, ((Symbol)CUP$SintacticParser$stack.peek()), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // join_estructure ::= JOIN COLONS O_SBRACKET O_BRACE integers_entries C_BRACE COMMA O_BRACE integers_entries C_BRACE C_SBRACKET SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("join_estructure",7, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-11)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // integers_entries ::= INTEGER COMMA INTEGER 
            {
              Object RESULT =null;
		int i1left = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).left;
		int i1right = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).right;
		Integer i1 = (Integer)((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).value;
		int i2left = ((Symbol)CUP$SintacticParser$stack.peek()).left;
		int i2right = ((Symbol)CUP$SintacticParser$stack.peek()).right;
		Integer i2 = (Integer)((Symbol) CUP$SintacticParser$stack.peek()).value;
		create.join_dec.add(i1);create.join_dec.add(i2);
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("integers_entries",23, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // integers_entries ::= INTEGER COMMA integers_entries 
            {
              Object RESULT =null;
		int i3left = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).left;
		int i3right = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).right;
		Integer i3 = (Integer)((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).value;
		create.join_dec.add(i3);
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("integers_entries",23, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_estructure ::= TYPE COLONS TYPE_ATTRIBUTE SEMICOLON 
            {
              Object RESULT =null;
		int s1left = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int s1right = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Object s1 = (Object)((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		create.type_dec.add(s1.toString());
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("type_estructure",9, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tags_estructure ::= TAGS COLONS O_SBRACKET string_entries C_SBRACKET SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("tags_estructure",10, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-5)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // string_entries ::= STRING 
            {
              Object RESULT =null;
		int s1left = ((Symbol)CUP$SintacticParser$stack.peek()).left;
		int s1right = ((Symbol)CUP$SintacticParser$stack.peek()).right;
		Object s1 = (Object)((Symbol) CUP$SintacticParser$stack.peek()).value;
		create.tags_dec.add(s1.toString());
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("string_entries",22, ((Symbol)CUP$SintacticParser$stack.peek()), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // string_entries ::= STRING COMMA string_entries 
            {
              Object RESULT =null;
		int s2left = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).left;
		int s2right = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).right;
		Object s2 = (Object)((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).value;
		create.tags_dec.add(s2.toString());
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("string_entries",22, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // values_estructure ::= VALUES COLONS O_SBRACKET operation_entries C_SBRACKET SEMICOLON 
            {
              Object RESULT =null;

              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("values_estructure",11, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-5)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operation_entries ::= input_operations 
            {
              Object RESULT =null;
		int i1left = ((Symbol)CUP$SintacticParser$stack.peek()).left;
		int i1right = ((Symbol)CUP$SintacticParser$stack.peek()).right;
		Object i1 = (Object)((Symbol) CUP$SintacticParser$stack.peek()).value;
		create.value_dec.add(Double.valueOf(i1.toString()));
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("operation_entries",24, ((Symbol)CUP$SintacticParser$stack.peek()), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operation_entries ::= input_operations COMMA operation_entries 
            {
              Object RESULT =null;
		int i2left = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).left;
		int i2right = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).right;
		Object i2 = (Object)((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).value;
		create.value_dec.add(Double.valueOf(i2.toString()));
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("operation_entries",24, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // total_estructure ::= TOTAL COLONS input_operations SEMICOLON 
            {
              Object RESULT =null;
		int i1left = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int i1right = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Object i1 = (Object)((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		create.total_dec.add(Double.valueOf(i1.toString()));
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("total_estructure",12, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // extra_estructure ::= EXTRA COLONS STRING SEMICOLON 
            {
              Object RESULT =null;
		int s1left = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int s1right = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Object s1 = (Object)((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		create.extra_dec.add(s1.toString());
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("extra_estructure",13, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-3)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // input_operations ::= numbers_type 
            {
              Object RESULT =null;
		int numberleft = ((Symbol)CUP$SintacticParser$stack.peek()).left;
		int numberright = ((Symbol)CUP$SintacticParser$stack.peek()).right;
		Object number = (Object)((Symbol) CUP$SintacticParser$stack.peek()).value;
		 RESULT = Double.valueOf(number.toString()); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("input_operations",15, ((Symbol)CUP$SintacticParser$stack.peek()), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // input_operations ::= O_PARENT input_operations C_PARENT 
            {
              Object RESULT =null;
		int numberleft = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int numberright = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Object number = (Object)((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		 RESULT = Double.valueOf(number.toString()); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("input_operations",15, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // input_operations ::= input_operations aritmethic_estructure input_operations 
            {
              Object RESULT =null;
		int numberLleft = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).left;
		int numberLright = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).right;
		Object numberL = (Object)((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)).value;
		int opleft = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).left;
		int opright = ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).right;
		Object op = (Object)((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-1)).value;
		int numberRleft = ((Symbol)CUP$SintacticParser$stack.peek()).left;
		int numberRright = ((Symbol)CUP$SintacticParser$stack.peek()).right;
		Object numberR = (Object)((Symbol) CUP$SintacticParser$stack.peek()).value;
		 
                                                                                                  Double l = Double.valueOf(numberL.toString());
                                                                                                  Double r = Double.valueOf(numberR.toString());
                                                                                                  Double total = 0.0;
                                                                                                  switch(Integer.valueOf(op.toString())){
                                                                                                          case sym.SUMA:
                                                                                                                total = l + r;
                                                                                                                break;
                                                                                                          case sym.RESTA:
                                                                                                                total = l - r;
                                                                                                                break;
                                                                                                          case sym.DIVIDE:
                                                                                                                total = l / r;
                                                                                                                break;
                                                                                                          case sym.MULTIPLY:
                                                                                                                total = l * r;
                                                                                                                break;
                                                                                                          default:
                                                                                                                System.out.println("Error en la operación");
                                                                                                                break;
                                                                                                  }
                                                                                                  Object o = create.recordOperation(l, r, numberLleft, numberLright, Integer.valueOf(op.toString()));
                                                                                                  if (o != null){
                                                                                                          errors.add((ErrorDesc) o);
                                                                                                  }
                                                                                                  RESULT = total;
                                                                                               
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("input_operations",15, ((Symbol)CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top-2)), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // numbers_type ::= INTEGER 
            {
              Object RESULT =null;
		int numberIntleft = ((Symbol)CUP$SintacticParser$stack.peek()).left;
		int numberIntright = ((Symbol)CUP$SintacticParser$stack.peek()).right;
		Integer numberInt = (Integer)((Symbol) CUP$SintacticParser$stack.peek()).value;
		 RESULT = Integer.valueOf(numberInt.toString()); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("numbers_type",16, ((Symbol)CUP$SintacticParser$stack.peek()), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // numbers_type ::= DECIMAL 
            {
              Object RESULT =null;
		int numberDoleft = ((Symbol)CUP$SintacticParser$stack.peek()).left;
		int numberDoright = ((Symbol)CUP$SintacticParser$stack.peek()).right;
		Double numberDo = (Double)((Symbol) CUP$SintacticParser$stack.peek()).value;
		 RESULT = Double.valueOf(numberDo.toString()); 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("numbers_type",16, ((Symbol)CUP$SintacticParser$stack.peek()), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // aritmethic_estructure ::= SUMA 
            {
              Object RESULT =null;
		 RESULT = sym.SUMA; 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("aritmethic_estructure",8, ((Symbol)CUP$SintacticParser$stack.peek()), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // aritmethic_estructure ::= RESTA 
            {
              Object RESULT =null;
		 RESULT = sym.RESTA; 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("aritmethic_estructure",8, ((Symbol)CUP$SintacticParser$stack.peek()), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // aritmethic_estructure ::= MULTIPLY 
            {
              Object RESULT =null;
		 RESULT = sym.MULTIPLY; 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("aritmethic_estructure",8, ((Symbol)CUP$SintacticParser$stack.peek()), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // aritmethic_estructure ::= DIVIDE 
            {
              Object RESULT =null;
		 RESULT = sym.DIVIDE; 
              CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("aritmethic_estructure",8, ((Symbol)CUP$SintacticParser$stack.peek()), ((Symbol)CUP$SintacticParser$stack.peek()), RESULT);
            }
          return CUP$SintacticParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final Symbol CUP$SintacticParser$do_action(
    int                        CUP$SintacticParser$act_num,
    lr_parser CUP$SintacticParser$parser,
    java.util.Stack            CUP$SintacticParser$stack,
    int                        CUP$SintacticParser$top)
    throws Exception
    {
              return CUP$SintacticParser$do_action_part00000000(
                               CUP$SintacticParser$act_num,
                               CUP$SintacticParser$parser,
                               CUP$SintacticParser$stack,
                               CUP$SintacticParser$top);
    }
}

}
