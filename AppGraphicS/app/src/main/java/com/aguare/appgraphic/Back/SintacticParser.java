//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------
package com.aguare.appgraphic.Back;

import com.aguare.appgraphic.Back.AnalizerPractice;
import com.aguare.appgraphic.Back.Control.ErrorDesc;
import com.aguare.appgraphic.Back.Control.CreateGraphics;
import com.aguare.appgraphic.Back.Control.Transition;
import java.util.ArrayList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/**
 * CUP v0.11b 20160615 generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class SintacticParser extends lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public SintacticParser() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public SintacticParser(Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public SintacticParser(Scanner s, SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\053\000\002\002\004\000\002\024\003\000\002\024"
        + "\004\000\002\002\004\000\002\002\002\000\002\025\003"
        + "\000\002\025\003\000\002\023\007\000\002\003\007\000"
        + "\002\004\004\000\002\004\004\000\002\004\004\000\002"
        + "\004\004\000\002\004\002\000\002\004\004\000\002\005"
        + "\007\000\002\020\004\000\002\020\004\000\002\020\004"
        + "\000\002\020\004\000\002\020\004\000\002\020\004\000"
        + "\002\020\004\000\002\020\002\000\002\020\004\000\002"
        + "\006\006\000\002\007\012\000\002\010\012\000\002\011"
        + "\022\000\002\013\006\000\002\014\012\000\002\015\012"
        + "\000\002\016\006\000\002\017\006\000\002\021\003\000"
        + "\002\021\005\000\002\021\005\000\002\022\003\000\002"
        + "\022\003\000\002\012\003\000\002\012\003\000\002\012"
        + "\003\000\002\012\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\176\000\010\002\ufffd\006\013\023\010\001\002\000"
        + "\006\002\ufffb\006\ufffb\001\002\000\010\002\ufffd\006\013"
        + "\023\010\001\002\000\006\002\ufffd\006\013\001\002\000"
        + "\004\002\000\001\002\000\004\034\173\001\002\000\006"
        + "\002\ufffc\006\ufffc\001\002\000\004\002\172\001\002\000"
        + "\006\007\015\010\014\001\002\000\004\030\113\001\002"
        + "\000\004\030\016\001\002\000\016\003\027\011\030\012"
        + "\025\013\024\016\021\031\ufff4\001\002\000\004\031\112"
        + "\001\002\000\016\003\027\011\030\012\025\013\024\016"
        + "\021\031\ufff4\001\002\000\004\037\072\001\002\000\016"
        + "\003\027\011\030\012\025\013\024\016\021\031\ufff4\001"
        + "\002\000\016\003\027\011\030\012\025\013\024\016\021"
        + "\031\ufff4\001\002\000\004\037\045\001\002\000\004\037"
        + "\036\001\002\000\016\003\027\011\030\012\025\013\024"
        + "\016\021\031\ufff4\001\002\000\004\036\034\001\002\000"
        + "\004\037\031\001\002\000\004\040\032\001\002\000\004"
        + "\036\033\001\002\000\030\003\uffe8\011\uffe8\012\uffe8\013"
        + "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\021\uffe8\022\uffe8"
        + "\031\uffe8\001\002\000\004\031\ufff3\001\002\000\004\031"
        + "\ufff5\001\002\000\004\032\037\001\002\000\004\040\040"
        + "\001\002\000\004\041\041\001\002\000\004\040\042\001"
        + "\002\000\004\033\043\001\002\000\004\036\044\001\002"
        + "\000\016\003\uffe7\011\uffe7\012\uffe7\013\uffe7\016\uffe7\031"
        + "\uffe7\001\002\000\004\032\046\001\002\000\010\004\047"
        + "\005\053\034\050\001\002\000\020\024\uffdc\025\uffdc\026"
        + "\uffdc\027\uffdc\033\uffdc\035\uffdc\041\uffdc\001\002\000\010"
        + "\004\047\005\053\034\050\001\002\000\014\024\056\025"
        + "\055\026\061\027\057\041\054\001\002\000\020\024\uffdf"
        + "\025\uffdf\026\uffdf\027\uffdf\033\uffdf\035\uffdf\041\uffdf\001"
        + "\002\000\020\024\uffdb\025\uffdb\026\uffdb\027\uffdb\033\uffdb"
        + "\035\uffdb\041\uffdb\001\002\000\010\004\047\005\053\034"
        + "\050\001\002\000\010\004\uffd9\005\uffd9\034\uffd9\001\002"
        + "\000\010\004\uffda\005\uffda\034\uffda\001\002\000\010\004"
        + "\uffd7\005\uffd7\034\uffd7\001\002\000\010\004\047\005\053"
        + "\034\050\001\002\000\010\004\uffd8\005\uffd8\034\uffd8\001"
        + "\002\000\020\024\056\025\055\026\061\027\057\033\uffdd"
        + "\035\uffdd\041\uffdd\001\002\000\014\024\056\025\055\026"
        + "\061\027\057\033\064\001\002\000\004\036\065\001\002"
        + "\000\016\003\uffe6\011\uffe6\012\uffe6\013\uffe6\016\uffe6\031"
        + "\uffe6\001\002\000\014\024\056\025\055\026\061\027\057"
        + "\035\067\001\002\000\020\024\uffde\025\uffde\026\uffde\027"
        + "\uffde\033\uffde\035\uffde\041\uffde\001\002\000\004\031\ufff7"
        + "\001\002\000\004\031\ufff8\001\002\000\004\032\073\001"
        + "\002\000\004\030\074\001\002\000\004\004\075\001\002"
        + "\000\004\041\076\001\002\000\004\004\077\001\002\000"
        + "\004\031\100\001\002\000\004\041\101\001\002\000\004"
        + "\030\102\001\002\000\004\004\103\001\002\000\004\041"
        + "\104\001\002\000\004\004\105\001\002\000\004\031\106"
        + "\001\002\000\004\033\107\001\002\000\004\036\110\001"
        + "\002\000\030\003\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5"
        + "\015\uffe5\016\uffe5\017\uffe5\021\uffe5\022\uffe5\031\uffe5\001"
        + "\002\000\004\031\ufff6\001\002\000\006\002\ufff9\006\ufff9"
        + "\001\002\000\024\003\126\011\030\014\130\015\127\016"
        + "\021\017\124\021\117\022\131\031\uffea\001\002\000\024"
        + "\003\126\011\030\014\130\015\127\016\021\017\124\021"
        + "\117\022\131\031\uffea\001\002\000\004\031\170\001\002"
        + "\000\024\003\126\011\030\014\130\015\127\016\021\017"
        + "\124\021\117\022\131\031\uffea\001\002\000\004\037\164"
        + "\001\002\000\024\003\126\011\030\014\130\015\127\016"
        + "\021\017\124\021\117\022\131\031\uffea\001\002\000\024"
        + "\003\126\011\030\014\130\015\127\016\021\017\124\021"
        + "\117\022\131\031\uffea\001\002\000\024\003\126\011\030"
        + "\014\130\015\127\016\021\017\124\021\117\022\131\031"
        + "\uffea\001\002\000\024\003\126\011\030\014\130\015\127"
        + "\016\021\017\124\021\117\022\131\031\uffea\001\002\000"
        + "\004\037\155\001\002\000\024\003\126\011\030\014\130"
        + "\015\127\016\021\017\124\021\117\022\131\031\uffea\001"
        + "\002\000\004\036\153\001\002\000\004\037\144\001\002"
        + "\000\004\037\135\001\002\000\004\037\132\001\002\000"
        + "\004\040\133\001\002\000\004\036\134\001\002\000\024"
        + "\003\uffe0\011\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\021"
        + "\uffe0\022\uffe0\031\uffe0\001\002\000\004\032\136\001\002"
        + "\000\004\040\137\001\002\000\004\041\140\001\002\000"
        + "\004\040\141\001\002\000\004\033\142\001\002\000\004"
        + "\036\143\001\002\000\024\003\uffe3\011\uffe3\014\uffe3\015"
        + "\uffe3\016\uffe3\017\uffe3\021\uffe3\022\uffe3\031\uffe3\001\002"
        + "\000\004\032\145\001\002\000\004\004\146\001\002\000"
        + "\004\041\147\001\002\000\004\004\150\001\002\000\004"
        + "\033\151\001\002\000\004\036\152\001\002\000\024\003"
        + "\uffe2\011\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\021\uffe2"
        + "\022\uffe2\031\uffe2\001\002\000\004\031\uffe9\001\002\000"
        + "\004\031\ufff0\001\002\000\004\020\156\001\002\000\004"
        + "\036\157\001\002\000\024\003\uffe4\011\uffe4\014\uffe4\015"
        + "\uffe4\016\uffe4\017\uffe4\021\uffe4\022\uffe4\031\uffe4\001\002"
        + "\000\004\031\uffed\001\002\000\004\031\uffeb\001\002\000"
        + "\004\031\uffef\001\002\000\004\031\uffec\001\002\000\004"
        + "\004\165\001\002\000\004\036\166\001\002\000\024\003"
        + "\uffe1\011\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\021\uffe1"
        + "\022\uffe1\031\uffe1\001\002\000\004\031\uffee\001\002\000"
        + "\006\002\ufff2\006\ufff2\001\002\000\004\031\ufff1\001\002"
        + "\000\004\002\001\001\002\000\004\040\174\001\002\000"
        + "\004\035\175\001\002\000\004\036\176\001\002\000\010"
        + "\002\ufffa\006\ufffa\023\ufffa\001\002\000\004\002\ufffe\001"
        + "\002\000\004\002\uffff\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\176\000\016\002\006\003\003\005\010\023\004\024"
        + "\011\025\005\001\001\000\002\001\001\000\016\002\006"
        + "\003\003\005\010\023\004\024\177\025\005\001\001\000"
        + "\012\002\176\003\003\005\010\025\005\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\014\004\016\006\021\007\022\010\017\011\025\001"
        + "\001\000\002\001\001\000\014\004\110\006\021\007\022"
        + "\010\017\011\025\001\001\000\002\001\001\000\014\004"
        + "\070\006\021\007\022\010\017\011\025\001\001\000\014"
        + "\004\067\006\021\007\022\010\017\011\025\001\001\000"
        + "\002\001\001\000\002\001\001\000\014\004\034\006\021"
        + "\007\022\010\017\011\025\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\006\021\050\022\051\001\001\000\002"
        + "\001\001\000\006\021\065\022\051\001\001\000\004\012"
        + "\057\001\001\000\002\001\001\000\002\001\001\000\006"
        + "\021\062\022\051\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\006\021\061\022\051\001\001"
        + "\000\002\001\001\000\004\012\057\001\001\000\004\012"
        + "\057\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\012\057\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\022\006\113\011\117\013"
        + "\124\014\120\015\115\016\122\017\121\020\114\001\001"
        + "\000\022\006\113\011\117\013\124\014\120\015\115\016"
        + "\122\017\121\020\170\001\001\000\002\001\001\000\022"
        + "\006\113\011\117\013\124\014\120\015\115\016\122\017"
        + "\121\020\166\001\001\000\002\001\001\000\022\006\113"
        + "\011\117\013\124\014\120\015\115\016\122\017\121\020"
        + "\162\001\001\000\022\006\113\011\117\013\124\014\120"
        + "\015\115\016\122\017\121\020\161\001\001\000\022\006"
        + "\113\011\117\013\124\014\120\015\115\016\122\017\121"
        + "\020\160\001\001\000\022\006\113\011\117\013\124\014"
        + "\120\015\115\016\122\017\121\020\157\001\001\000\002"
        + "\001\001\000\022\006\113\011\117\013\124\014\120\015"
        + "\115\016\122\017\121\020\153\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$SintacticParser$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$SintacticParser$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public Symbol do_action(
            int act_num,
            lr_parser parser,
            java.util.Stack stack,
            int top)
            throws Exception {
        /* call code in generated class */
        return action_obj.CUP$SintacticParser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    ArrayList<ErrorDesc> errors = new ArrayList<>();
    Transition trans = new Transition();
    public CreateGraphics create = new CreateGraphics();

    public SintacticParser(AnalizerPractice lexer) {
        super(lexer);
    }

    public void viewToken(Symbol cur_token) {
        System.out.println("Simbolo detectado " + sym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
    }

    public void syntax_error(Symbol cur_token) {
        if (cur_token.sym != sym.EOF) {
            addError(cur_token);
        } else {
            System.out.println("Fin Lectura");
            create.showGraphicsSaved();
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        addError(cur_token);
    }

    public void addError(Symbol cur_token) {
        try {
            errors.add(new ErrorDesc((String) cur_token.value, cur_token.left, cur_token.right, trans.analizeError(stack), "Sintáctico"));
        } catch (Exception e) {
        }
    }

    public void showErrors() {
        for (ErrorDesc error : errors) {
            System.out.println("Lexema:" + error.getContent() + " L:" + error.getLine()
                    + " C:" + error.getColumn() + " Tipo:" + error.getTypeError() + " " + error.getMsjInfo());
        }
    }

    public void showSavedGrap() {
        create.showGraphicsSaved();
    }

    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$SintacticParser$actions {

        private final SintacticParser parser;

        /**
         * Constructor
         */
        CUP$SintacticParser$actions(SintacticParser parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final Symbol CUP$SintacticParser$do_action_part00000000(
                int CUP$SintacticParser$act_num,
                lr_parser CUP$SintacticParser$parser,
                java.util.Stack CUP$SintacticParser$stack,
                int CUP$SintacticParser$top)
                throws Exception {
            /* Symbol object for return from actions */
            Symbol CUP$SintacticParser$result;

            /* select the action based on the action number */
            switch (CUP$SintacticParser$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= init_declaration EOF 
                {
                    Object RESULT = null;
                    int start_valleft = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).left;
                    int start_valright = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).right;
                    Object start_val = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).value;
                    RESULT = start_val;
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$SintacticParser$parser.done_parsing();
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // init_declaration ::= initial 
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("init_declaration", 18, ((Symbol) CUP$SintacticParser$stack.peek()), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // init_declaration ::= execute_graphics init_declaration 
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("init_declaration", 18, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // initial ::= graphics_declaration initial 
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("initial", 0, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // initial ::= 
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("initial", 0, ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // graphics_declaration ::= pie_estructure 
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("graphics_declaration", 19, ((Symbol) CUP$SintacticParser$stack.peek()), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // graphics_declaration ::= bar_estructure 
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("graphics_declaration", 19, ((Symbol) CUP$SintacticParser$stack.peek()), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // execute_graphics ::= RUN O_PARENT STRING C_PARENT SEMICOLON 
                {
                    Object RESULT = null;
                    int s1left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).left;
                    int s1right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).right;
                    Object s1 = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).value;

                    if (!create.saveRunGraphic(s1.toString())) {
                        errors.add(new ErrorDesc("No existe", s1left, s1right, "La gráfica no está declarada", "Semántico"));
                    }

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("execute_graphics", 17, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 4)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // bar_estructure ::= START_GRAPHIC TYPE_BARS O_BRACE bar_attributes C_BRACE 
                {
                    Object RESULT = null;
                    create.type_graphic = 0;
                    Object ob = create.verifyCountDeclaration(cur_token.left, cur_token.right);
                    if (ob instanceof ErrorDesc) {
                        errors.add((ErrorDesc) ob);
                    }

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("bar_estructure", 1, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 4)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // bar_attributes ::= title_estructure bar_attributes 
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("bar_attributes", 2, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // bar_attributes ::= axisx_estructure bar_attributes 
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("bar_attributes", 2, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // bar_attributes ::= axisy_estructure bar_attributes 
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("bar_attributes", 2, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // bar_attributes ::= join_estructure bar_attributes 
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("bar_attributes", 2, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // bar_attributes ::= 
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("bar_attributes", 2, ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // bar_attributes ::= error SEMICOLON 
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("bar_attributes", 2, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // pie_estructure ::= START_GRAPHIC TYPE_PIE O_BRACE pie_attributes C_BRACE 
                {
                    Object RESULT = null;
                    create.type_graphic = 1;
                    Object ob = create.verifyCountDeclaration(cur_token.left, cur_token.right);
                    if (ob instanceof ErrorDesc) {
                        errors.add((ErrorDesc) ob);
                    }

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_estructure", 3, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 4)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // pie_attributes ::= title_estructure pie_attributes 
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes", 14, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // pie_attributes ::= type_estructure pie_attributes 
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes", 14, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // pie_attributes ::= tags_estructure pie_attributes 
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes", 14, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // pie_attributes ::= values_estructure pie_attributes 
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes", 14, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // pie_attributes ::= total_estructure pie_attributes 
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes", 14, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // pie_attributes ::= join_estructure pie_attributes 
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes", 14, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // pie_attributes ::= extra_estructure pie_attributes 
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes", 14, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // pie_attributes ::= 
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes", 14, ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // pie_attributes ::= error SEMICOLON 
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes", 14, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // title_estructure ::= ID_GRAPHIC COLONS STRING SEMICOLON 
                {
                    Object RESULT = null;
                    int nleft = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).left;
                    int nright = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).right;
                    Object n = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).value;
                    create.title_dec.add(n.toString());
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("title_estructure", 4, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 3)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // axisx_estructure ::= AXIS_X COLONS O_SBRACKET STRING COMMA STRING C_SBRACKET SEMICOLON 
                {
                    Object RESULT = null;
                    int s1left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 4)).left;
                    int s1right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 4)).right;
                    Object s1 = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 4)).value;
                    int s2left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).left;
                    int s2right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).right;
                    Object s2 = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).value;

                    create.axisx_dec.add(s1.toString());
                    create.axisx_dec.add(s2.toString());

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("axisx_estructure", 5, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 7)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // axisy_estructure ::= AXIS_Y COLONS O_SBRACKET input_operations COMMA input_operations C_SBRACKET SEMICOLON 
                {
                    Object RESULT = null;
                    int op1left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 4)).left;
                    int op1right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 4)).right;
                    Object op1 = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 4)).value;
                    int op2left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).left;
                    int op2right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).right;
                    Object op2 = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).value;

                    create.axisy_dec.add(Double.valueOf(op1.toString()));
                    create.axisy_dec.add(Double.valueOf(op2.toString()));

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("axisy_estructure", 6, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 7)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // join_estructure ::= JOIN COLONS O_SBRACKET O_BRACE INTEGER COMMA INTEGER C_BRACE COMMA O_BRACE INTEGER COMMA INTEGER C_BRACE C_SBRACKET SEMICOLON 
                {
                    Object RESULT = null;
                    int i1left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 11)).left;
                    int i1right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 11)).right;
                    Integer i1 = (Integer) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 11)).value;
                    int i2left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 9)).left;
                    int i2right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 9)).right;
                    Integer i2 = (Integer) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 9)).value;
                    int i3left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 5)).left;
                    int i3right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 5)).right;
                    Integer i3 = (Integer) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 5)).value;
                    int i4left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 3)).left;
                    int i4right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 3)).right;
                    Integer i4 = (Integer) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 3)).value;

                    create.join_dec.add(i1);
                    create.join_dec.add(i2);
                    create.join_dec.add(i3);
                    create.join_dec.add(i4);

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("join_estructure", 7, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 15)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // type_estructure ::= TYPE COLONS TYPE_ATTRIBUTE SEMICOLON 
                {
                    Object RESULT = null;
                    int s1left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).left;
                    int s1right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).right;
                    Object s1 = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).value;
                    create.type_dec.add(s1.toString());
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("type_estructure", 9, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 3)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // tags_estructure ::= TAGS COLONS O_SBRACKET STRING COMMA STRING C_SBRACKET SEMICOLON 
                {
                    Object RESULT = null;
                    int s1left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 4)).left;
                    int s1right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 4)).right;
                    Object s1 = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 4)).value;
                    int s2left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).left;
                    int s2right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).right;
                    Object s2 = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).value;

                    create.tags_dec.add(s1.toString());
                    create.tags_dec.add(s2.toString());

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("tags_estructure", 10, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 7)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // values_estructure ::= VALUES COLONS O_SBRACKET INTEGER COMMA INTEGER C_SBRACKET SEMICOLON 
                {
                    Object RESULT = null;
                    int i1left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 4)).left;
                    int i1right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 4)).right;
                    Integer i1 = (Integer) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 4)).value;
                    int i2left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).left;
                    int i2right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).right;
                    Integer i2 = (Integer) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).value;

                    create.value_dec.add(Double.valueOf(i1));
                    create.value_dec.add(Double.valueOf(i2));

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("values_estructure", 11, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 7)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // total_estructure ::= TOTAL COLONS INTEGER SEMICOLON 
                {
                    Object RESULT = null;
                    int i1left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).left;
                    int i1right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).right;
                    Integer i1 = (Integer) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).value;
                    create.total_dec.add(Double.valueOf(i1));
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("total_estructure", 12, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 3)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // extra_estructure ::= EXTRA COLONS STRING SEMICOLON 
                {
                    Object RESULT = null;
                    int s1left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).left;
                    int s1right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).right;
                    Object s1 = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).value;
                    create.extra_dec.add(s1.toString());
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("extra_estructure", 13, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 3)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // input_operations ::= numbers_type 
                {
                    Object RESULT = null;
                    int numberleft = ((Symbol) CUP$SintacticParser$stack.peek()).left;
                    int numberright = ((Symbol) CUP$SintacticParser$stack.peek()).right;
                    Object number = (Object) ((Symbol) CUP$SintacticParser$stack.peek()).value;
                    RESULT = Double.valueOf(number.toString());
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("input_operations", 15, ((Symbol) CUP$SintacticParser$stack.peek()), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // input_operations ::= O_PARENT input_operations C_PARENT 
                {
                    Object RESULT = null;
                    int numberleft = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).left;
                    int numberright = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).right;
                    Object number = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).value;
                    RESULT = Double.valueOf(number.toString());
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("input_operations", 15, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // input_operations ::= input_operations aritmethic_estructure input_operations 
                {
                    Object RESULT = null;
                    int numberLleft = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).left;
                    int numberLright = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).right;
                    Object numberL = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).value;
                    int opleft = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).left;
                    int opright = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).right;
                    Object op = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).value;
                    int numberRleft = ((Symbol) CUP$SintacticParser$stack.peek()).left;
                    int numberRright = ((Symbol) CUP$SintacticParser$stack.peek()).right;
                    Object numberR = (Object) ((Symbol) CUP$SintacticParser$stack.peek()).value;

                    Double l = Double.valueOf(numberL.toString());
                    Double r = Double.valueOf(numberR.toString());
                    Double total = 0.0;
                    switch (Integer.valueOf(op.toString())) {
                        case sym.SUMA:
                            total = l + r;
                            break;
                        case sym.RESTA:
                            total = l - r;
                            break;
                        case sym.DIVIDE:
                            total = l / r;
                            break;
                        case sym.MULTIPLY:
                            total = l * r;
                            break;
                        default:
                            System.out.println("Error en la operación");
                            break;
                    }
                    Object o = create.recordOperation(l, r, numberLleft, numberLright, Integer.valueOf(op.toString()));
                    if (o != null) {
                        errors.add((ErrorDesc) o);
                    }
                    RESULT = total;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("input_operations", 15, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // numbers_type ::= INTEGER 
                {
                    Object RESULT = null;
                    int numberIntleft = ((Symbol) CUP$SintacticParser$stack.peek()).left;
                    int numberIntright = ((Symbol) CUP$SintacticParser$stack.peek()).right;
                    Integer numberInt = (Integer) ((Symbol) CUP$SintacticParser$stack.peek()).value;
                    RESULT = Integer.valueOf(numberInt.toString());
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("numbers_type", 16, ((Symbol) CUP$SintacticParser$stack.peek()), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // numbers_type ::= DECIMAL 
                {
                    Object RESULT = null;
                    int numberDoleft = ((Symbol) CUP$SintacticParser$stack.peek()).left;
                    int numberDoright = ((Symbol) CUP$SintacticParser$stack.peek()).right;
                    Double numberDo = (Double) ((Symbol) CUP$SintacticParser$stack.peek()).value;
                    RESULT = Double.valueOf(numberDo.toString());
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("numbers_type", 16, ((Symbol) CUP$SintacticParser$stack.peek()), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // aritmethic_estructure ::= SUMA 
                {
                    Object RESULT = null;
                    RESULT = sym.SUMA;
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("aritmethic_estructure", 8, ((Symbol) CUP$SintacticParser$stack.peek()), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // aritmethic_estructure ::= RESTA 
                {
                    Object RESULT = null;
                    RESULT = sym.RESTA;
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("aritmethic_estructure", 8, ((Symbol) CUP$SintacticParser$stack.peek()), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // aritmethic_estructure ::= MULTIPLY 
                {
                    Object RESULT = null;
                    RESULT = sym.MULTIPLY;
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("aritmethic_estructure", 8, ((Symbol) CUP$SintacticParser$stack.peek()), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // aritmethic_estructure ::= DIVIDE 
                {
                    Object RESULT = null;
                    RESULT = sym.DIVIDE;
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("aritmethic_estructure", 8, ((Symbol) CUP$SintacticParser$stack.peek()), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$SintacticParser$act_num + "found in internal parse table");

            }
        }

        /* end of method */

        /**
         * Method splitting the generated action code into several parts.
         */
        public final Symbol CUP$SintacticParser$do_action(
                int CUP$SintacticParser$act_num,
                lr_parser CUP$SintacticParser$parser,
                java.util.Stack CUP$SintacticParser$stack,
                int CUP$SintacticParser$top)
                throws Exception {
            return CUP$SintacticParser$do_action_part00000000(
                    CUP$SintacticParser$act_num,
                    CUP$SintacticParser$parser,
                    CUP$SintacticParser$stack,
                    CUP$SintacticParser$top);
        }
    }

}
