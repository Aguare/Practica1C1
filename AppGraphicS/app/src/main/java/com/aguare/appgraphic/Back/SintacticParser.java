
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package com.aguare.appgraphic.Back;

import com.aguare.appgraphic.Back.Control.ErrorDesc;
import com.aguare.appgraphic.Back.Control.CreateGraphics;
import com.aguare.appgraphic.Back.Control.Transition;

import java.util.ArrayList;

import com.aguare.appgraphic.Back.sym;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/**
 * CUP v0.11b 20160615 generated parser.
 */
@SuppressWarnings({"rawtypes"})
public class SintacticParser extends lr_parser {

    public final Class getSymbolContainer() {
        return sym.class;
    }

    /**
     * Default constructor.
     */
    @Deprecated
    public SintacticParser() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    @Deprecated
    public SintacticParser(Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public SintacticParser(Scanner s, SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                    "\000\060\000\002\002\004\000\002\002\004\000\002\002" +
                            "\004\000\002\002\003\000\002\027\003\000\002\027\004" +
                            "\000\002\024\003\000\002\024\003\000\002\023\007\000" +
                            "\002\003\007\000\002\004\004\000\002\004\004\000\002" +
                            "\004\004\000\002\004\004\000\002\004\002\000\002\004" +
                            "\004\000\002\005\007\000\002\020\004\000\002\020\004" +
                            "\000\002\020\004\000\002\020\004\000\002\020\004\000" +
                            "\002\020\004\000\002\020\004\000\002\020\002\000\002" +
                            "\020\004\000\002\006\006\000\002\007\010\000\002\025" +
                            "\005\000\002\025\003\000\002\010\010\000\002\026\005" +
                            "\000\002\026\003\000\002\011\022\000\002\013\006\000" +
                            "\002\014\012\000\002\015\012\000\002\016\006\000\002" +
                            "\017\006\000\002\021\003\000\002\021\005\000\002\021" +
                            "\005\000\002\022\003\000\002\022\003\000\002\012\003" +
                            "\000\002\012\003\000\002\012\003\000\002\012\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                    "\000\200\000\004\006\010\001\002\000\010\002\ufffa\006" +
                            "\ufffa\023\ufffa\001\002\000\010\002\ufffe\006\010\023\175" +
                            "\001\002\000\004\002\171\001\002\000\010\002\ufffb\006" +
                            "\ufffb\023\ufffb\001\002\000\006\007\012\010\011\001\002" +
                            "\000\004\030\112\001\002\000\004\030\013\001\002\000" +
                            "\016\003\024\011\025\012\022\013\021\016\016\031\ufff3" +
                            "\001\002\000\004\031\111\001\002\000\016\003\024\011" +
                            "\025\012\022\013\021\016\016\031\ufff3\001\002\000\004" +
                            "\037\071\001\002\000\016\003\024\011\025\012\022\013" +
                            "\021\016\016\031\ufff3\001\002\000\016\003\024\011\025" +
                            "\012\022\013\021\016\016\031\ufff3\001\002\000\004\037" +
                            "\043\001\002\000\004\037\033\001\002\000\016\003\024" +
                            "\011\025\012\022\013\021\016\016\031\ufff3\001\002\000" +
                            "\004\036\031\001\002\000\004\037\026\001\002\000\004" +
                            "\040\027\001\002\000\004\036\030\001\002\000\030\003" +
                            "\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7" +
                            "\017\uffe7\021\uffe7\022\uffe7\031\uffe7\001\002\000\004\031" +
                            "\ufff2\001\002\000\004\031\ufff4\001\002\000\004\032\034" +
                            "\001\002\000\004\040\035\001\002\000\006\033\uffe4\041" +
                            "\041\001\002\000\004\033\037\001\002\000\004\036\040" +
                            "\001\002\000\016\003\uffe6\011\uffe6\012\uffe6\013\uffe6\016" +
                            "\uffe6\031\uffe6\001\002\000\004\040\035\001\002\000\004" +
                            "\033\uffe5\001\002\000\004\032\044\001\002\000\010\004" +
                            "\046\005\052\034\047\001\002\000\004\033\065\001\002" +
                            "\000\022\024\uffd7\025\uffd7\026\uffd7\027\uffd7\033\uffd7\035" +
                            "\uffd7\036\uffd7\041\uffd7\001\002\000\010\004\046\005\052" +
                            "\034\047\001\002\000\016\024\055\025\054\026\060\027" +
                            "\056\033\uffe1\041\053\001\002\000\022\024\uffda\025\uffda" +
                            "\026\uffda\027\uffda\033\uffda\035\uffda\036\uffda\041\uffda\001" +
                            "\002\000\022\024\uffd6\025\uffd6\026\uffd6\027\uffd6\033\uffd6" +
                            "\035\uffd6\036\uffd6\041\uffd6\001\002\000\010\004\046\005" +
                            "\052\034\047\001\002\000\010\004\uffd4\005\uffd4\034\uffd4" +
                            "\001\002\000\010\004\uffd5\005\uffd5\034\uffd5\001\002\000" +
                            "\010\004\uffd2\005\uffd2\034\uffd2\001\002\000\010\004\046" +
                            "\005\052\034\047\001\002\000\010\004\uffd3\005\uffd3\034" +
                            "\uffd3\001\002\000\022\024\055\025\054\026\060\027\056" +
                            "\033\uffd8\035\uffd8\036\uffd8\041\uffd8\001\002\000\004\033" +
                            "\uffe2\001\002\000\014\024\055\025\054\026\060\027\056" +
                            "\035\064\001\002\000\022\024\uffd9\025\uffd9\026\uffd9\027" +
                            "\uffd9\033\uffd9\035\uffd9\036\uffd9\041\uffd9\001\002\000\004" +
                            "\036\066\001\002\000\016\003\uffe3\011\uffe3\012\uffe3\013" +
                            "\uffe3\016\uffe3\031\uffe3\001\002\000\004\031\ufff6\001\002" +
                            "\000\004\031\ufff7\001\002\000\004\032\072\001\002\000" +
                            "\004\030\073\001\002\000\004\004\074\001\002\000\004" +
                            "\041\075\001\002\000\004\004\076\001\002\000\004\031" +
                            "\077\001\002\000\004\041\100\001\002\000\004\030\101" +
                            "\001\002\000\004\004\102\001\002\000\004\041\103\001" +
                            "\002\000\004\004\104\001\002\000\004\031\105\001\002" +
                            "\000\004\033\106\001\002\000\004\036\107\001\002\000" +
                            "\030\003\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
                            "\016\uffe0\017\uffe0\021\uffe0\022\uffe0\031\uffe0\001\002\000" +
                            "\004\031\ufff5\001\002\000\010\002\ufff8\006\ufff8\023\ufff8" +
                            "\001\002\000\024\003\125\011\025\014\127\015\126\016" +
                            "\016\017\124\021\116\022\130\031\uffe9\001\002\000\024" +
                            "\003\125\011\025\014\127\015\126\016\016\017\124\021" +
                            "\116\022\130\031\uffe9\001\002\000\004\031\167\001\002" +
                            "\000\024\003\125\011\025\014\127\015\126\016\016\017" +
                            "\124\021\116\022\130\031\uffe9\001\002\000\004\037\163" +
                            "\001\002\000\024\003\125\011\025\014\127\015\126\016" +
                            "\016\017\124\021\116\022\130\031\uffe9\001\002\000\024" +
                            "\003\125\011\025\014\127\015\126\016\016\017\124\021" +
                            "\116\022\130\031\uffe9\001\002\000\024\003\125\011\025" +
                            "\014\127\015\126\016\016\017\124\021\116\022\130\031" +
                            "\uffe9\001\002\000\024\003\125\011\025\014\127\015\126" +
                            "\016\016\017\124\021\116\022\130\031\uffe9\001\002\000" +
                            "\024\003\125\011\025\014\127\015\126\016\016\017\124" +
                            "\021\116\022\130\031\uffe9\001\002\000\004\037\153\001" +
                            "\002\000\004\036\152\001\002\000\004\037\143\001\002" +
                            "\000\004\037\134\001\002\000\004\037\131\001\002\000" +
                            "\004\040\132\001\002\000\004\036\133\001\002\000\024" +
                            "\003\uffdb\011\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\021" +
                            "\uffdb\022\uffdb\031\uffdb\001\002\000\004\032\135\001\002" +
                            "\000\004\040\136\001\002\000\004\041\137\001\002\000" +
                            "\004\040\140\001\002\000\004\033\141\001\002\000\004" +
                            "\036\142\001\002\000\024\003\uffde\011\uffde\014\uffde\015" +
                            "\uffde\016\uffde\017\uffde\021\uffde\022\uffde\031\uffde\001\002" +
                            "\000\004\032\144\001\002\000\010\004\046\005\052\034" +
                            "\047\001\002\000\014\024\055\025\054\026\060\027\056" +
                            "\041\146\001\002\000\010\004\046\005\052\034\047\001" +
                            "\002\000\014\024\055\025\054\026\060\027\056\033\150" +
                            "\001\002\000\004\036\151\001\002\000\024\003\uffdd\011" +
                            "\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\021\uffdd\022\uffdd" +
                            "\031\uffdd\001\002\000\004\031\uffe8\001\002\000\004\020" +
                            "\154\001\002\000\004\036\155\001\002\000\024\003\uffdf" +
                            "\011\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\021\uffdf\022" +
                            "\uffdf\031\uffdf\001\002\000\004\031\uffef\001\002\000\004" +
                            "\031\uffec\001\002\000\004\031\uffea\001\002\000\004\031" +
                            "\uffee\001\002\000\004\031\uffeb\001\002\000\010\004\046" +
                            "\005\052\034\047\001\002\000\014\024\055\025\054\026" +
                            "\060\027\056\036\165\001\002\000\024\003\uffdc\011\uffdc" +
                            "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\021\uffdc\022\uffdc\031" +
                            "\uffdc\001\002\000\004\031\uffed\001\002\000\010\002\ufff1" +
                            "\006\ufff1\023\ufff1\001\002\000\004\031\ufff0\001\002\000" +
                            "\004\002\001\001\002\000\006\002\ufffd\023\175\001\002" +
                            "\000\004\002\uffff\001\002\000\004\002\000\001\002\000" +
                            "\004\034\176\001\002\000\004\040\177\001\002\000\004" +
                            "\035\200\001\002\000\004\036\201\001\002\000\006\002" +
                            "\ufff9\023\ufff9\001\002\000\004\002\ufffc\001\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /**
     * <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                    "\000\200\000\012\002\005\003\003\005\006\024\004\001" +
                            "\001\000\002\001\001\000\016\002\173\003\003\005\006" +
                            "\023\171\024\004\027\172\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\014\004\013\006\016\007\017\010\014\011" +
                            "\022\001\001\000\002\001\001\000\014\004\107\006\016" +
                            "\007\017\010\014\011\022\001\001\000\002\001\001\000" +
                            "\014\004\067\006\016\007\017\010\014\011\022\001\001" +
                            "\000\014\004\066\006\016\007\017\010\014\011\022\001" +
                            "\001\000\002\001\001\000\002\001\001\000\014\004\031" +
                            "\006\016\007\017\010\014\011\022\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\004\025\035\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\004\025\041\001\001\000\002\001\001\000\002\001\001" +
                            "\000\010\021\047\022\050\026\044\001\001\000\002\001" +
                            "\001\000\002\001\001\000\006\021\062\022\050\001\001" +
                            "\000\004\012\056\001\001\000\002\001\001\000\002\001" +
                            "\001\000\010\021\047\022\050\026\061\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
                            "\060\022\050\001\001\000\002\001\001\000\004\012\056" +
                            "\001\001\000\002\001\001\000\004\012\056\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\022\006\112" +
                            "\011\116\013\122\014\117\015\114\016\121\017\120\020" +
                            "\113\001\001\000\022\006\112\011\116\013\122\014\117" +
                            "\015\114\016\121\017\120\020\167\001\001\000\002\001" +
                            "\001\000\022\006\112\011\116\013\122\014\117\015\114" +
                            "\016\121\017\120\020\165\001\001\000\002\001\001\000" +
                            "\022\006\112\011\116\013\122\014\117\015\114\016\121" +
                            "\017\120\020\161\001\001\000\022\006\112\011\116\013" +
                            "\122\014\117\015\114\016\121\017\120\020\160\001\001" +
                            "\000\022\006\112\011\116\013\122\014\117\015\114\016" +
                            "\121\017\120\020\157\001\001\000\022\006\112\011\116" +
                            "\013\122\014\117\015\114\016\121\017\120\020\156\001" +
                            "\001\000\022\006\112\011\116\013\122\014\117\015\114" +
                            "\016\121\017\120\020\155\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\006\021\144\022\050" +
                            "\001\001\000\004\012\056\001\001\000\006\021\146\022" +
                            "\050\001\001\000\004\012\056\001\001\000\002\001\001" +
                            "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\006\021\163\022\050\001\001\000\004\012\056" +
                            "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                            "\001\000\002\001\001\000\002\001\001\000\006\023\171" +
                            "\027\201\001\001\000\002\001\001\000\002\001\001\000" +
                            "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
                            "\001\001\000\002\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$SintacticParser$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$SintacticParser$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public Symbol do_action(
            int act_num,
            lr_parser parser,
            java.util.Stack stack,
            int top)
            throws Exception {
        /* call code in generated class */
        return action_obj.CUP$SintacticParser$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /**
     * <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /**
     * <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }


    public ArrayList<ErrorDesc> errors = new ArrayList<>();
    Transition trans = new Transition();
    public CreateGraphics create = new CreateGraphics();

    public SintacticParser(AnalizerPractice lexer) {
        super(lexer);
    }

    public void viewToken(Symbol cur_token) {
        System.out.println("Simbolo detectado " + sym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
    }

    public void syntax_error(Symbol cur_token) {
        if (cur_token.sym != sym.EOF) {
            addError(cur_token);
        } else {
            System.out.println("Fin Lectura");
            create.showGraphicsSaved();
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        addError(cur_token);
    }

    public void addError(Symbol cur_token) {
        try {
            errors.add(new ErrorDesc((String) cur_token.value, cur_token.left, cur_token.right, trans.analizeError(stack), "Sintáctico"));
        } catch (Exception e) {
        }
    }

    public void showErrors() {
        for (ErrorDesc error : errors) {
            System.out.println("Lexema:" + error.getContent() + " L:" + error.getLine()
                    + " C:" + error.getColumn() + " Tipo:" + error.getTypeError() + " " + error.getMsjInfo());
        }
    }

    public void showSavedGrap() {
        create.showGraphicsSaved();
    }


    /**
     * Cup generated class to encapsulate user supplied action code.
     */
    @SuppressWarnings({"rawtypes", "unchecked", "unused"})
    class CUP$SintacticParser$actions {
        private final SintacticParser parser;

        /**
         * Constructor
         */
        CUP$SintacticParser$actions(SintacticParser parser) {
            this.parser = parser;
        }

        /**
         * Method 0 with the actual generated action code for actions 0 to 300.
         */
        public final Symbol CUP$SintacticParser$do_action_part00000000(
                int CUP$SintacticParser$act_num,
                lr_parser CUP$SintacticParser$parser,
                java.util.Stack CUP$SintacticParser$stack,
                int CUP$SintacticParser$top)
                throws Exception {
            /* Symbol object for return from actions */
            Symbol CUP$SintacticParser$result;

            /* select the action based on the action number */
            switch (CUP$SintacticParser$act_num) {
                /*. . . . . . . . . . . . . . . . . . . .*/
                case 0: // $START ::= initial EOF
                {
                    Object RESULT = null;
                    int start_valleft = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).left;
                    int start_valright = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).right;
                    Object start_val = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).value;
                    RESULT = start_val;
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$SintacticParser$parser.done_parsing();
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 1: // initial ::= graphics_declaration initial
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("initial", 0, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 2: // initial ::= graphics_declaration execute_estructure
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("initial", 0, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 3: // initial ::= graphics_declaration
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("initial", 0, ((Symbol) CUP$SintacticParser$stack.peek()), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 4: // execute_estructure ::= execute_graphics
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("execute_estructure", 21, ((Symbol) CUP$SintacticParser$stack.peek()), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 5: // execute_estructure ::= execute_graphics execute_estructure
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("execute_estructure", 21, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 6: // graphics_declaration ::= pie_estructure
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("graphics_declaration", 18, ((Symbol) CUP$SintacticParser$stack.peek()), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 7: // graphics_declaration ::= bar_estructure
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("graphics_declaration", 18, ((Symbol) CUP$SintacticParser$stack.peek()), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 8: // execute_graphics ::= RUN O_PARENT STRING C_PARENT SEMICOLON
                {
                    Object RESULT = null;
                    int s1left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).left;
                    int s1right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).right;
                    Object s1 = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).value;

                    if (!create.saveRunGraphic(s1.toString())) {
                        errors.add(new ErrorDesc("No existe", s1left, s1right, "La gráfica no está declarada", "Semántico"));
                    }

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("execute_graphics", 17, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 4)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 9: // bar_estructure ::= START_GRAPHIC TYPE_BARS O_BRACE bar_attributes C_BRACE
                {
                    Object RESULT = null;
                    create.type_graphic = 0;
                    Object ob = create.verifyCountDeclaration(cur_token.left, cur_token.right);
                    if (ob instanceof ErrorDesc) {
                        errors.add((ErrorDesc) ob);
                    }

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("bar_estructure", 1, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 4)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 10: // bar_attributes ::= title_estructure bar_attributes
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("bar_attributes", 2, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 11: // bar_attributes ::= axisx_estructure bar_attributes
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("bar_attributes", 2, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 12: // bar_attributes ::= axisy_estructure bar_attributes
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("bar_attributes", 2, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 13: // bar_attributes ::= join_estructure bar_attributes
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("bar_attributes", 2, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 14: // bar_attributes ::=
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("bar_attributes", 2, ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 15: // bar_attributes ::= error SEMICOLON
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("bar_attributes", 2, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 16: // pie_estructure ::= START_GRAPHIC TYPE_PIE O_BRACE pie_attributes C_BRACE
                {
                    Object RESULT = null;
                    create.type_graphic = 1;
                    Object ob = create.verifyCountDeclaration(cur_token.left, cur_token.right);
                    if (ob instanceof ErrorDesc) {
                        errors.add((ErrorDesc) ob);
                    }

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_estructure", 3, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 4)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 17: // pie_attributes ::= title_estructure pie_attributes
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes", 14, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 18: // pie_attributes ::= type_estructure pie_attributes
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes", 14, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 19: // pie_attributes ::= tags_estructure pie_attributes
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes", 14, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 20: // pie_attributes ::= values_estructure pie_attributes
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes", 14, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 21: // pie_attributes ::= total_estructure pie_attributes
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes", 14, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 22: // pie_attributes ::= join_estructure pie_attributes
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes", 14, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 23: // pie_attributes ::= extra_estructure pie_attributes
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes", 14, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 24: // pie_attributes ::=
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes", 14, ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 25: // pie_attributes ::= error SEMICOLON
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("pie_attributes", 14, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 26: // title_estructure ::= ID_GRAPHIC COLONS STRING SEMICOLON
                {
                    Object RESULT = null;
                    int nleft = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).left;
                    int nright = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).right;
                    Object n = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).value;
                    create.title_dec.add(n.toString());
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("title_estructure", 4, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 3)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 27: // axisx_estructure ::= AXIS_X COLONS O_SBRACKET axisx_entry C_SBRACKET SEMICOLON
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("axisx_estructure", 5, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 5)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 28: // axisx_entry ::= STRING COMMA axisx_entry
                {
                    Object RESULT = null;
                    int s1left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).left;
                    int s1right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).right;
                    Object s1 = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).value;
                    create.axisx_dec.add(s1.toString());
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("axisx_entry", 19, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 29: // axisx_entry ::= STRING
                {
                    Object RESULT = null;
                    int s2left = ((Symbol) CUP$SintacticParser$stack.peek()).left;
                    int s2right = ((Symbol) CUP$SintacticParser$stack.peek()).right;
                    Object s2 = (Object) ((Symbol) CUP$SintacticParser$stack.peek()).value;
                    create.axisx_dec.add(s2.toString());
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("axisx_entry", 19, ((Symbol) CUP$SintacticParser$stack.peek()), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 30: // axisy_estructure ::= AXIS_Y COLONS O_SBRACKET axisy_entry C_SBRACKET SEMICOLON
                {
                    Object RESULT = null;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("axisy_estructure", 6, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 5)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 31: // axisy_entry ::= input_operations COMMA axisy_entry
                {
                    Object RESULT = null;
                    int op1left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).left;
                    int op1right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).right;
                    Object op1 = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).value;
                    create.axisy_dec.add(Double.valueOf(op1.toString()));
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("axisy_entry", 20, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 32: // axisy_entry ::= input_operations
                {
                    Object RESULT = null;
                    int op2left = ((Symbol) CUP$SintacticParser$stack.peek()).left;
                    int op2right = ((Symbol) CUP$SintacticParser$stack.peek()).right;
                    Object op2 = (Object) ((Symbol) CUP$SintacticParser$stack.peek()).value;
                    create.axisy_dec.add(Double.valueOf(op2.toString()));
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("axisy_entry", 20, ((Symbol) CUP$SintacticParser$stack.peek()), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 33: // join_estructure ::= JOIN COLONS O_SBRACKET O_BRACE INTEGER COMMA INTEGER C_BRACE COMMA O_BRACE INTEGER COMMA INTEGER C_BRACE C_SBRACKET SEMICOLON
                {
                    Object RESULT = null;
                    int i1left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 11)).left;
                    int i1right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 11)).right;
                    Integer i1 = (Integer) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 11)).value;
                    int i2left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 9)).left;
                    int i2right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 9)).right;
                    Integer i2 = (Integer) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 9)).value;
                    int i3left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 5)).left;
                    int i3right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 5)).right;
                    Integer i3 = (Integer) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 5)).value;
                    int i4left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 3)).left;
                    int i4right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 3)).right;
                    Integer i4 = (Integer) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 3)).value;

                    create.join_dec.add(i1);
                    create.join_dec.add(i2);
                    create.join_dec.add(i3);
                    create.join_dec.add(i4);

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("join_estructure", 7, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 15)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 34: // type_estructure ::= TYPE COLONS TYPE_ATTRIBUTE SEMICOLON
                {
                    Object RESULT = null;
                    int s1left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).left;
                    int s1right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).right;
                    Object s1 = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).value;
                    create.type_dec.add(s1.toString());
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("type_estructure", 9, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 3)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 35: // tags_estructure ::= TAGS COLONS O_SBRACKET STRING COMMA STRING C_SBRACKET SEMICOLON
                {
                    Object RESULT = null;
                    int s1left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 4)).left;
                    int s1right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 4)).right;
                    Object s1 = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 4)).value;
                    int s2left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).left;
                    int s2right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).right;
                    Object s2 = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).value;

                    create.tags_dec.add(s1.toString());
                    create.tags_dec.add(s2.toString());

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("tags_estructure", 10, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 7)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 36: // values_estructure ::= VALUES COLONS O_SBRACKET input_operations COMMA input_operations C_SBRACKET SEMICOLON
                {
                    Object RESULT = null;
                    int i1left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 4)).left;
                    int i1right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 4)).right;
                    Object i1 = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 4)).value;
                    int i2left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).left;
                    int i2right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).right;
                    Object i2 = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).value;

                    create.value_dec.add(Double.valueOf(i1.toString()));
                    create.value_dec.add(Double.valueOf(i2.toString()));

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("values_estructure", 11, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 7)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 37: // total_estructure ::= TOTAL COLONS input_operations SEMICOLON
                {
                    Object RESULT = null;
                    int i1left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).left;
                    int i1right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).right;
                    Object i1 = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).value;
                    create.total_dec.add(Double.valueOf(i1.toString()));
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("total_estructure", 12, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 3)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 38: // extra_estructure ::= EXTRA COLONS STRING SEMICOLON
                {
                    Object RESULT = null;
                    int s1left = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).left;
                    int s1right = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).right;
                    Object s1 = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).value;
                    create.extra_dec.add(s1.toString());
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("extra_estructure", 13, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 3)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 39: // input_operations ::= numbers_type
                {
                    Object RESULT = null;
                    int numberleft = ((Symbol) CUP$SintacticParser$stack.peek()).left;
                    int numberright = ((Symbol) CUP$SintacticParser$stack.peek()).right;
                    Object number = (Object) ((Symbol) CUP$SintacticParser$stack.peek()).value;
                    RESULT = Double.valueOf(number.toString());
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("input_operations", 15, ((Symbol) CUP$SintacticParser$stack.peek()), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 40: // input_operations ::= O_PARENT input_operations C_PARENT
                {
                    Object RESULT = null;
                    int numberleft = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).left;
                    int numberright = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).right;
                    Object number = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).value;
                    RESULT = Double.valueOf(number.toString());
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("input_operations", 15, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 41: // input_operations ::= input_operations aritmethic_estructure input_operations
                {
                    Object RESULT = null;
                    int numberLleft = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).left;
                    int numberLright = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).right;
                    Object numberL = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)).value;
                    int opleft = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).left;
                    int opright = ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).right;
                    Object op = (Object) ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 1)).value;
                    int numberRleft = ((Symbol) CUP$SintacticParser$stack.peek()).left;
                    int numberRright = ((Symbol) CUP$SintacticParser$stack.peek()).right;
                    Object numberR = (Object) ((Symbol) CUP$SintacticParser$stack.peek()).value;

                    Double l = Double.valueOf(numberL.toString());
                    Double r = Double.valueOf(numberR.toString());
                    Double total = 0.0;
                    switch (Integer.valueOf(op.toString())) {
                        case sym.SUMA:
                            total = l + r;
                            break;
                        case sym.RESTA:
                            total = l - r;
                            break;
                        case sym.DIVIDE:
                            total = l / r;
                            break;
                        case sym.MULTIPLY:
                            total = l * r;
                            break;
                        default:
                            System.out.println("Error en la operación");
                            break;
                    }
                    Object o = create.recordOperation(l, r, numberLleft, numberLright, Integer.valueOf(op.toString()));
                    if (o != null) {
                        errors.add((ErrorDesc) o);
                    }
                    RESULT = total;

                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("input_operations", 15, ((Symbol) CUP$SintacticParser$stack.elementAt(CUP$SintacticParser$top - 2)), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 42: // numbers_type ::= INTEGER
                {
                    Object RESULT = null;
                    int numberIntleft = ((Symbol) CUP$SintacticParser$stack.peek()).left;
                    int numberIntright = ((Symbol) CUP$SintacticParser$stack.peek()).right;
                    Integer numberInt = (Integer) ((Symbol) CUP$SintacticParser$stack.peek()).value;
                    RESULT = Integer.valueOf(numberInt.toString());
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("numbers_type", 16, ((Symbol) CUP$SintacticParser$stack.peek()), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 43: // numbers_type ::= DECIMAL
                {
                    Object RESULT = null;
                    int numberDoleft = ((Symbol) CUP$SintacticParser$stack.peek()).left;
                    int numberDoright = ((Symbol) CUP$SintacticParser$stack.peek()).right;
                    Double numberDo = (Double) ((Symbol) CUP$SintacticParser$stack.peek()).value;
                    RESULT = Double.valueOf(numberDo.toString());
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("numbers_type", 16, ((Symbol) CUP$SintacticParser$stack.peek()), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 44: // aritmethic_estructure ::= SUMA
                {
                    Object RESULT = null;
                    RESULT = sym.SUMA;
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("aritmethic_estructure", 8, ((Symbol) CUP$SintacticParser$stack.peek()), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 45: // aritmethic_estructure ::= RESTA
                {
                    Object RESULT = null;
                    RESULT = sym.RESTA;
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("aritmethic_estructure", 8, ((Symbol) CUP$SintacticParser$stack.peek()), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 46: // aritmethic_estructure ::= MULTIPLY
                {
                    Object RESULT = null;
                    RESULT = sym.MULTIPLY;
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("aritmethic_estructure", 8, ((Symbol) CUP$SintacticParser$stack.peek()), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /*. . . . . . . . . . . . . . . . . . . .*/
                case 47: // aritmethic_estructure ::= DIVIDE
                {
                    Object RESULT = null;
                    RESULT = sym.DIVIDE;
                    CUP$SintacticParser$result = parser.getSymbolFactory().newSymbol("aritmethic_estructure", 8, ((Symbol) CUP$SintacticParser$stack.peek()), ((Symbol) CUP$SintacticParser$stack.peek()), RESULT);
                }
                return CUP$SintacticParser$result;

                /* . . . . . .*/
                default:
                    throw new Exception(
                            "Invalid action number " + CUP$SintacticParser$act_num + "found in internal parse table");

            }
        } /* end of method */

        /**
         * Method splitting the generated action code into several parts.
         */
        public final Symbol CUP$SintacticParser$do_action(
                int CUP$SintacticParser$act_num,
                lr_parser CUP$SintacticParser$parser,
                java.util.Stack CUP$SintacticParser$stack,
                int CUP$SintacticParser$top)
                throws Exception {
            return CUP$SintacticParser$do_action_part00000000(
                    CUP$SintacticParser$act_num,
                    CUP$SintacticParser$parser,
                    CUP$SintacticParser$stack,
                    CUP$SintacticParser$top);
        }
    }

}
