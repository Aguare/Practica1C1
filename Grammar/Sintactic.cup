/* SECTION 1: user code */
package Back;

import Back.Control.ErrorDesc;
import Back.Control.CreateGraphics;
import Back.Control.Transition;
import java.util.ArrayList;
import java_cup.runtime.*;

parser code {:

        ArrayList<ErrorDesc> errors = new ArrayList<>();
        Transition trans = new Transition();
        CreateGraphics create = new CreateGraphics();

        public SintacticParser(AnalizerPractice lexer){
                super(lexer);
        }

        public void viewToken(Symbol cur_token){
                System.out.println("Simbolo detectado " + sym.terminalNames[cur_token.sym]);
                System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
        }

        public void syntax_error(Symbol cur_token) {
                if (cur_token.sym != sym.EOF){
                        addError(cur_token);
                }else{
                        System.out.println("Fin Lectura");
                        create.showGraphicsSaved();
                }
        }
    
        public void unrecovered_syntax_error(Symbol cur_token) {
                addError(cur_token);
        }
    
        public void addError(Symbol cur_token) {
                try {
                        errors.add(new ErrorDesc((String) cur_token.value, cur_token.left, cur_token.right, trans.analizeError(stack), "Sint치ctico"));
                } catch (Exception e) {
                }
        }
    
        public void showErrors() {
                for (ErrorDesc error : errors) {
                        System.out.println("Lexema:" + error.getContent() + " L:" + error.getLine()
                        + " C:" + error.getColumn() + " Tipo:" + error.getTypeError() + " " + error.getMsjInfo());
                }
        }

        public void showSavedGrap(){
            create.showGraphicsSaved();
        }
:};

/* Terminals (tokens returned by the scanner). */
terminal Integer INTEGER;
terminal Double DECIMAL;
terminal START_GRAPHIC, TYPE_BARS, TYPE_PIE, ID_GRAPHIC, AXIS_X, AXIS_Y,
         TAGS, VALUES, JOIN, TYPE, TYPE_ATTRIBUTE, TOTAL, EXTRA,
         RUN, SUMA, RESTA, MULTIPLY, DIVIDE, O_BRACE, 
         C_BRACE, O_SBRACKET, C_SBRACKET, O_PARENT, C_PARENT,
         SEMICOLON, COLONS, STRING, COMMA;

/* Non terminals */
non terminal initial, bar_estructure, bar_attributes, pie_estructure, 
             title_estructure, axisx_estructure, axisy_estructure,
             join_estructure, aritmethic_estructure, type_estructure, 
             tags_estructure, values_estructure, total_estructure, 
             extra_estructure, pie_attributes, input_operations, 
             numbers_type, execute_graphics, init_declaration,
             graphics_declaration;


/* The Precedence rules*/
precedence left SUMA, RESTA;
precedence left MULTIPLY, DIVIDE;

start with init_declaration;

init_declaration::= initial
                  | execute_graphics init_declaration
                  ;

/* The grammar rules */
initial ::= graphics_declaration initial                
          |                 
          ;

graphics_declaration::= pie_estructure
                      | bar_estructure 
                      ;

execute_graphics::= RUN O_PARENT STRING:s1 C_PARENT SEMICOLON                   {:
                                                                                        if (!create.saveRunGraphic(s1.toString())){
                                                                                                errors.add(new ErrorDesc("No existe",s1left,s1right,"La gr치fica no est치 declarada", "Sem치ntico"));
                                                                                        }
                                                                                :}
                  ;

bar_estructure ::= START_GRAPHIC TYPE_BARS O_BRACE bar_attributes C_BRACE     {:create.type_graphic = 0; Object ob = create.verifyCountDeclaration(cur_token.left, cur_token.right);
                                                                                if (ob instanceof ErrorDesc) {
                                                                                        errors.add((ErrorDesc) ob);
                                                                                }
                                                                              :}
                 ;    

bar_attributes ::= title_estructure bar_attributes
                 | axisx_estructure bar_attributes
                 | axisy_estructure bar_attributes
                 | join_estructure bar_attributes
                 |
                 | error SEMICOLON                                                       
                 ;

pie_estructure::= START_GRAPHIC TYPE_PIE O_BRACE pie_attributes C_BRACE       {:create.type_graphic = 1; Object ob = create.verifyCountDeclaration(cur_token.left, cur_token.right);
                                                                                if (ob instanceof ErrorDesc) {
                                                                                        errors.add((ErrorDesc) ob);
                                                                                }                                                           
                                                                              :}
                ;

pie_attributes::= title_estructure pie_attributes            
                | type_estructure pie_attributes
                | tags_estructure pie_attributes
                | values_estructure pie_attributes
                | total_estructure pie_attributes
                | join_estructure pie_attributes
                | extra_estructure pie_attributes
                |
                | error SEMICOLON
                ;

title_estructure::= ID_GRAPHIC COLONS STRING:n SEMICOLON                       {:create.title_dec.add(n.toString());:}
                  ;                                               

axisx_estructure::= AXIS_X COLONS O_SBRACKET STRING:s1 COMMA STRING:s2 C_SBRACKET SEMICOLON     {:
                                                                                                        create.axisx_dec.add(s1.toString());
                                                                                                        create.axisx_dec.add(s2.toString());
                                                                                                :}
                  ;   

axisy_estructure::= AXIS_Y COLONS O_SBRACKET input_operations:op1 COMMA input_operations:op2 C_SBRACKET SEMICOLON      {:
                                                                                                                                create.axisy_dec.add(Double.valueOf(op1.toString()));
                                                                                                                                create.axisy_dec.add(Double.valueOf(op2.toString()));
                                                                                                                       :}
                  ;

join_estructure::= JOIN COLONS O_SBRACKET O_BRACE INTEGER:i1 COMMA INTEGER:i2 C_BRACE COMMA
                   O_BRACE INTEGER:i3 COMMA INTEGER:i4 C_BRACE C_SBRACKET SEMICOLON                {:
                                                                                                        create.join_dec.add(i1);create.join_dec.add(i2);
                                                                                                        create.join_dec.add(i3);create.join_dec.add(i4);
                                                                                                   :}
                 ;

type_estructure::= TYPE COLONS TYPE_ATTRIBUTE:s1 SEMICOLON      {:create.type_dec.add(s1.toString());:}
                 ;

tags_estructure::= TAGS COLONS O_SBRACKET STRING:s1 COMMA STRING:s2 C_SBRACKET SEMICOLON        {:
                                                                                                        create.tags_dec.add(s1.toString());
                                                                                                        create.tags_dec.add(s2.toString());
                                                                                                :}
                 ;

values_estructure::= VALUES COLONS O_SBRACKET INTEGER:i1 COMMA INTEGER:i2 C_SBRACKET SEMICOLON  {:
                                                                                                        create.value_dec.add(Double.valueOf(i1));
                                                                                                        create.value_dec.add(Double.valueOf(i2));
                                                                                                :}
                   ;

total_estructure::= TOTAL COLONS INTEGER:i1 SEMICOLON           {:create.total_dec.add(Double.valueOf(i1));:}
                  ;

extra_estructure::= EXTRA COLONS STRING:s1 SEMICOLON            {:create.extra_dec.add(s1.toString());:}
                  ;

/*Do arithmetic*/
input_operations::= numbers_type:number                                                        {: RESULT = Double.valueOf(number.toString()); :}
                  | O_PARENT input_operations:number C_PARENT                                         {: RESULT = Double.valueOf(number.toString()); :}
                  | input_operations:numberL aritmethic_estructure:op input_operations:numberR            {: 
                                                                                                  Double l = Double.valueOf(numberL.toString());
                                                                                                  Double r = Double.valueOf(numberR.toString());
                                                                                                  Double total = 0.0;
                                                                                                  switch(Integer.valueOf(op.toString())){
                                                                                                          case sym.SUMA:
                                                                                                                total = l + r;
                                                                                                                break;
                                                                                                          case sym.RESTA:
                                                                                                                total = l - r;
                                                                                                                break;
                                                                                                          case sym.DIVIDE:
                                                                                                                total = l / r;
                                                                                                                break;
                                                                                                          case sym.MULTIPLY:
                                                                                                                total = l * r;
                                                                                                                break;
                                                                                                          default:
                                                                                                                System.out.println("Error en la operaci칩n");
                                                                                                                break;
                                                                                                  }
                                                                                                  Object o = create.recordOperation(l, r, numberLleft, numberLright, Integer.valueOf(op.toString()));
                                                                                                  if (o != null){
                                                                                                          errors.add((ErrorDesc) o);
                                                                                                  }
                                                                                                  RESULT = total;
                                                                                               :}
                  ;

numbers_type::= INTEGER:numberInt               {: RESULT = Integer.valueOf(numberInt.toString()); :}
              | DECIMAL:numberDo                {: RESULT = Double.valueOf(numberDo.toString()); :}
              ;

aritmethic_estructure::= SUMA                   {: RESULT = sym.SUMA; :}
                       | RESTA                  {: RESULT = sym.RESTA; :}
                       | MULTIPLY               {: RESULT = sym.MULTIPLY; :}
                       | DIVIDE                 {: RESULT = sym.DIVIDE; :}
                       ;

